NEXT UP:

X Add fisher jenks classification

- Add categorical classification
- Add single symbol classification

- Fix weird thing where self.classes only saves most recent classification, need to save classes of all classifications. SOLUTION: just pass the entire classification dictionary instead of specifying each argument, that way classes can be added to each classification dictionary and accessed later. While at it also sort out where the default classification stuff should be set(should be in AddClassification, bc CalculateClasses should never really be used directly so should only receive the dictionary)...
- Add freeform rectangle/line/circle functions
- Add Legend function

- Add philosophy section to README (about syntax policy and reasons behind it eg arcpy legacy)

- Add simple zoomextent, by testing each shape for bbox in extent before rendering
- Add Labels function with variable size/color/etc

- Enable partial transparency and invisible (None) when rendering symbols...
- Find way to calculate symbolsizes as percentage of mapsize instead of absolute pixel value
- Add numpy way to GetCenter in PyShpShape 
- Add possibility to set a renderorder based on a classification (similar to setting a symboltype like fillsize), and make a faster indexed way of rendering in sorted order (maybe by building my own indexfile of byte position of each shape). This bc sorted order rendering is slow bc grabs one shape at a time which is slower, as opposed to iterShapes().

- Find way to determine whether / or \ is correct path splitter
- Add simple way to render text, default font, and place it to relative xy location
- Add support for viewing shapefiles with the PyCairo renderer.
- Add some more example scripts?
- Add simple support for Python 3

LONG TERM:

- Add an easy way for the user to automatically classify and visualize individual shapefile features based on their underlying data values. 
-- first make itershapefile return feature but without actually reading anything, thus possible to use GetAttr or GetShape by using shapefile.shape() or .records() with each feature's index nr
-- then make itershapefile something the user can use without globvar progressbar problem, which means user can test attr of each feature and assign symbol options accordingly
-- above ok for manual simple stuff, but for classifying compared to entire sample, need a low-level classifier object that can be fed each row's attr connected to index nr (ala RTree). Ideally when has been finished fed, its getclassval method can be specified a classifytype (eq interval, nat jenks,etc) and calculates and returns its relative classvalue. 
-- then, the returned classvalue must be used to decide from a range of real symbol option choices one by one, by a higherlevel symbolcreator that is told by user what range of option choices to map onto values.
-- lastly, each feature's value-informed options dictionary must be somehow passed to a new RenderFeature function of the _Renderer class to render each individual feature based on options
- Add ability to zoom in to a certain extent instead of showing the entire world. 
- Add multiprocessing support (e.g. dividing up list of features to be rendered and then merging all partially rendered maps)
- Add support for projected shapefiles and to change coordinate system/projection of your map. 
